package org.bigsolr.spark

import org.bigsolr.hadoop.SolrInputFormat
import org.bigsolr.hadoop.SolrRecord
import org.apache.hadoop.io.NullWritable
import org.apache.hadoop.mapreduce.Job
import org.apache.hadoop.conf.Configuration

import scala.collection.JavaConversions._
import scala.language.existentials

import org.apache.spark.sql._
import org.apache.spark.sql.sources.{TableScan, PrunedFilteredScan, BaseRelation, Filter}


case class SolrRelation(location: String)(@transient val sqlContext: SQLContext) extends PrunedFilteredScan {
//case class SolrRelation(location: String)(@transient val sqlContext: SQLContext) extends TableScan {

  val schema = {
  	//
  	println("SolrRelation -> schema --------------------------------------------")
  	val schemaString = "id,description,author"
  	StructType(schemaString.split(",").map(fieldName => StructField(fieldName, StringType, true)))
  }

  override def buildScan(requiredColumns: Array[String], filters: Array[Filter]) = {
  //lazy val buildScan = {
  //override def buildScan() = {
  	println("SolrRelation -> buildScan() --------------------------------------------")
  	//
  	val queryStr = "description:*"
  	val serverUrl = "localhost:9983"
  	val serverMode = "SolrCloud"
  	val collection = "collection1"
  	val fields = "id,description,author"

    // Build the job configuration
    var hconf = new Configuration()
    hconf.set("solr.query", queryStr)
    hconf.set("solr.server.url", serverUrl)
    hconf.set("solr.server.mode", serverMode)
    hconf.set("solr.server.collection", collection)
    hconf.set("solr.server.fields", fields)
    val cnum = 2

    val job = new Job(hconf)
    job.setInputFormatClass(classOf[SolrInputFormat])

    println("configuation------------")
    println(job.getConfiguration().toString)
    
    val rdds = sqlContext.sparkContext.newAPIHadoopRDD(
    	job.getConfiguration(),
    	classOf[SolrInputFormat],
    	classOf[NullWritable],
    	classOf[SolrRecord]
    	)

    var id = ""
    var description = ""
    rdds.map {
      
      case (key, value) => {
        //value.getSolrDocument()
        //val values = (0 until cnum).map { i =>
        id = value.getFieldValues(new String("id")).toString()
	    description = value.getFieldValues(new String("description")).toString()
		//Row.fromSeq(Seq(id,description))
      }
      Row.fromSeq(Seq(id,description))
    }

  }

}